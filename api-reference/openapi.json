{
  "openapi": "3.1.0",
  "info": {
    "title": "Stable Sea Terminal API",
    "description": "A comprehensive API for managing terminal operations, organizations, quotes, and orders in the Stable Sea shipping platform",
    "license": {
      "name": "MIT"
    },
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "https://api-sandbox.stablesea.xyz/v1"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/liquidity-providers": {
      "get": {
        "summary": "List Liquidity Providers",
        "description": "Returns all available liquidity providers with their trading pairs and hours of operation",
        "responses": {
          "200": {
            "description": "Liquidity providers response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/LiquidityProvider"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/liquidity-providers/{provider_name}/exchange-rate": {
      "get": {
        "summary": "Get Exchange Rate",
        "description": "Get current exchange rate for a specific liquidity provider",
        "parameters": [
          {
            "name": "provider_name",
            "in": "path",
            "description": "Name of the liquidity provider",
            "required": true,
            "schema": {
              "type": "string",
              "example": "ALPHA"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Exchange rate response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ExchangeRate"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations": {
      "post": {
        "summary": "Create Organization",
        "description": "Creates a new organization",
        "requestBody": {
          "description": "Organization to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrganization"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Organization created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Organization"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Organizations",
        "description": "Returns all organizations",
        "responses": {
          "200": {
            "description": "Organizations response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Organization"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}": {
      "get": {
        "summary": "Get Organization",
        "description": "Retrieve details for a specific organization",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization to retrieve",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Customer details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Organization"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/external_payment_instruments": {
      "post": {
        "summary": "Create External Payment Instrument",
        "description": "Creates an external account for an organization to receive payouts",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "External payment instrument to create",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewExternalPaymentInstrument"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "External payment instrument created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ExternalPaymentInstrument"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List External Payment Instruments",
        "description": "Fetch all external payment instruments for a customer",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "External payment instruments response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ExternalPaymentInstrument"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/external_payment_instruments/{external_payment_instrument_id}": {
      "get": {
        "summary": "Get External Payment Instrument",
        "description": "Fetch a specific external payment instrument for an organization",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_payment_instrument_id",
            "in": "path",
            "description": "ID of external payment instrument",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "External payment instrument details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/ExternalPaymentInstrument"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "summary": "Archive External Payment Instrument",
        "description": "Archive an external account for a customer",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "external_payment_instrument_id",
            "in": "path",
            "description": "ID of external payment instrument",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "External payment instrument archived successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "External payment instrument archived successfully"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/offerings": {
      "post": {
        "summary": "Create Offerings",
        "description": "Creates offerings for an organization",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "Offerings created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Offering"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/offerings/{offering_id}": {
      "get": {
        "summary": "Get Offering",
        "description": "Retrieve details for a specific offering",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "offering_id",
            "in": "path",
            "description": "ID of offering",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Offering details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Offering"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/quotes": {
      "post": {
        "summary": "Create Quote",
        "description": "Creates a quote for an organization",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Quote request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewQuote"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Quote created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Quote"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/quotes/{quote_id}": {
      "get": {
        "summary": "Get Quote",
        "description": "Retrieve details for a specific quote",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "quote_id",
            "in": "path",
            "description": "ID of quote",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Quote details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Quote"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/orders": {
      "post": {
        "summary": "Create Order",
        "description": "Creates an order for an organization",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "description": "Order request",
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewOrder"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "description": "Order created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "summary": "List Orders",
        "description": "Returns all orders for a customer",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Orders response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Order"
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/organizations/{organization_id}/orders/{order_id}": {
      "get": {
        "summary": "Get Order",
        "description": "Retrieve details for a specific order",
        "parameters": [
          {
            "name": "organization_id",
            "in": "path",
            "description": "ID of organization",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "order_id",
            "in": "path",
            "description": "ID of order",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Order details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Order"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "DateTime": {
        "type": "string",
        "format": "date-time",
        "description": "ISO 8601 UTC timestamp (RFC3339)",
        "example": "2024-01-15T10:00:00Z"
      },
      "PayinCurrency": {
        "type": "string",
        "enum": [
          "USDC",
          "...more to come..."
        ],
        "example": "USDC"
      },
      "PayoutCurrency": {
        "type": "string",
        "enum": [
          "COP",
          "...more to come..."
        ],
        "example": "COP"
      },
      "Currency": {
        "type": "string",
        "enum": [
          "USDC",
          "COP",
          "...more to come..."
        ]
      },
      "PaymentMethod": {
        "type": "string",
        "enum": [
          "SOLANA_ADDRESS",
          "COP_BANK_ACCOUNT",
          "...more to come..."
        ]
      },
      "LiquidityProvider": {
        "type": "object",
        "required": [
          "name",
          "trading_pairs"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "ALPHA"
          },
          "trading_pairs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TradingPair"
            }
          }
        }
      },
      "TradingPair": {
        "type": "object",
        "required": [
          "payin_currency",
          "payout_currency",
          "hours_of_operation"
        ],
        "properties": {
          "payin_currency": {
            "$ref": "#/components/schemas/PayinCurrency"
          },
          "payout_currency": {
            "$ref": "#/components/schemas/PayoutCurrency"
          },
          "hours_of_operation": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "open_time_utc",
                "close_time_utc"
              ],
              "properties": {
                "open_time_utc": {
                  "$ref": "#/components/schemas/DateTime"
                },
                "close_time_utc": {
                  "$ref": "#/components/schemas/DateTime"
                }
              }
            }
          }
        }
      },
      "ExchangeRate": {
        "type": "object",
        "required": [
          "payin_currency",
          "payout_currency",
          "exchange_rate"
        ],
        "properties": {
          "payin_currency": {
            "$ref": "#/components/schemas/PayinCurrency"
          },
          "payout_currency": {
            "$ref": "#/components/schemas/PayoutCurrency"
          },
          "exchange_rate": {
            "type": "string",
            "example": "3921.8",
            "description": "Current exchange rate as a string to preserve precision"
          }
        }
      },
      "HoursOfOperation": {
        "type": "object",
        "required": [
          "liquidity_provider",
          "payin_currency",
          "payout_currency",
          "hours_of_operation"
        ],
        "properties": {
          "liquidity_provider": {
            "$ref": "#/components/schemas/LiquidityProvider"
          },
          "payin_currency": {
            "$ref": "#/components/schemas/PayinCurrency"
          },
          "payout_currency": {
            "$ref": "#/components/schemas/PayoutCurrency"
          },
          "hours_of_operation": {
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "open_time_utc",
                "close_time_utc"
              ],
              "properties": {
                "open_time_utc": {
                  "$ref": "#/components/schemas/DateTime"
                },
                "close_time_utc": {
                  "$ref": "#/components/schemas/DateTime"
                }
              }
            }
          }
        }
      },
      "OrganizationStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "COMPLIANCE_HOLD"
        ],
        "example": "ACTIVE"
      },
      "Organization": {
        "type": "object",
        "required": [
          "id",
          "name",
          "contact",
          "status",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string",
            "example": "org_01k2cm4r59e5z8k5ggrbbxjcwy"
          },
          "name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          },
          "status": {
            "type": "object",
            "required": [
              "current_status",
              "status_history"
            ],
            "properties": {
              "current_status": {
                "$ref": "#/components/schemas/OrganizationStatus"
              },
              "status_history": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "status",
                    "created_at"
                  ],
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/OrganizationStatus"
                    },
                    "created_at": {
                      "$ref": "#/components/schemas/DateTime"
                    }
                  }
                }
              }
            },
            "example": {
              "current_status": "ACTIVE",
              "status_history": [
                {
                  "status": "ACTIVE",
                  "created_at": "2024-01-15T10:00:00Z"
                }
              ]
            }
          },
          "created_at": {
            "$ref": "#/components/schemas/DateTime",
            "example": "2024-01-15T10:00:00Z"
          },
          "updated_at": {
            "$ref": "#/components/schemas/DateTime",
            "example": "2024-01-15T10:00:00Z"
          }
        }
      },
      "Contact": {
        "type": "object",
        "required": [
          "email",
          "first_name",
          "last_name"
        ],
        "properties": {
          "email": {
            "type": "string",
            "format": "email",
            "example": "john.doe@acme.com"
          },
          "first_name": {
            "type": "string",
            "example": "John"
          },
          "last_name": {
            "type": "string",
            "example": "Doe"
          }
        }
      },
      "NewOrganization": {
        "type": "object",
        "required": [
          "name",
          "contact"
        ],
        "properties": {
          "name": {
            "type": "string",
            "example": "Acme Corporation"
          },
          "contact": {
            "$ref": "#/components/schemas/Contact"
          }
        }
      },
      "ExternalPaymentInstrumentStatus": {
        "type": "string",
        "enum": [
          "ACTIVE",
          "COMPLIANCE_HOLD",
          "ARCHIVED"
        ]
      },
      "PaymentMethodSolanaAddress": {
        "type": "object",
        "title": "SOLANA_ADDRESS",
        "required": [
          "address"
        ],
        "properties": {
          "address": {
            "type": "string"
          }
        }
      },
      "PaymentMethodCopBankAccount": {
        "type": "object",
        "title": "COP_BANK_ACCOUNT",
        "required": [
          "bank_account_number",
          "bank_code",
          "account_holder_first_name",
          "account_holder_last_name",
          "legal_entity_name",
          "doc_type",
          "doc_id",
          "physical_address",
          "account_type"
        ],
        "properties": {
          "bank_account_number": {
            "type": "string"
          },
          "bank_code": {
            "type": "string"
          },
          "account_holder_first_name": {
            "type": "string"
          },
          "account_holder_last_name": {
            "type": "string"
          },
          "legal_entity_name": {
            "type": "string"
          },
          "doc_type": {
            "type": "string"
          },
          "doc_id": {
            "type": "string"
          },
          "physical_address": {
            "type": "string"
          },
          "account_type": {
            "type": "string"
          }
        }
      },
      "ExternalPaymentInstrument": {
        "type": "object",
        "required": [
          "id",
          "alias",
          "currency",
          "method",
          "status",
          "details",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          },
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "status": {
            "type": "object",
            "properties": {
              "current_status": {
                "$ref": "#/components/schemas/ExternalPaymentInstrumentStatus"
              },
              "status_history": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/ExternalPaymentInstrumentStatus"
                    },
                    "created_at": {
                      "$ref": "#/components/schemas/DateTime"
                    }
                  }
                }
              }
            }
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodSolanaAddress"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodCopBankAccount"
              }
            ]
          },
          "created_at": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "NewExternalPaymentInstrument": {
        "type": "object",
        "required": [
          "currency",
          "method",
          "details"
        ],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/Currency"
          },
          "method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodSolanaAddress"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodCopBankAccount"
              }
            ]
          }
        }
      },
      "DecimalString": {
        "type": "string",
        "format": "decimal",
        "description": "A string representation of a decimal number"
      },
      "Offering": {
        "type": "object",
        "required": [
          "id",
          "order_type",
          "payin",
          "payout",
          "indicative_exchange_rate",
          "current_day_hours_of_operation",
          "liquidity_provider",
          "estimated_settlement_time",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "order_type": {
            "type": "string",
            "enum": [
              "QUOTED",
              "LIMIT",
              "MARKET"
            ]
          },
          "payin": {
            "type": "object",
            "required": [
              "external_payment_instrument",
              "limits",
              "indicative_cost_tiers"
            ],
            "properties": {
              "external_payment_instrument": {
                "$ref": "#/components/schemas/ExternalPaymentInstrument"
              },
              "limits": {
                "type": "object",
                "required": [
                  "min",
                  "max"
                ],
                "properties": {
                  "min": {
                    "$ref": "#/components/schemas/DecimalString"
                  },
                  "max": {
                    "$ref": "#/components/schemas/DecimalString"
                  }
                }
              },
              "indicative_cost_tiers": {
                "type": "array",
                "items": {
                  "type": "object",
                  "required": [
                    "min",
                    "max",
                    "bps"
                  ],
                  "properties": {
                    "min": {
                      "$ref": "#/components/schemas/DecimalString"
                    },
                    "max": {
                      "$ref": "#/components/schemas/DecimalString"
                    },
                    "bps": {
                      "$ref": "#/components/schemas/DecimalString"
                    }
                  }
                }
              }
            }
          },
          "payout": {
            "type": "object",
            "required": [
              "external_payment_instrument"
            ],
            "properties": {
              "external_payment_instrument": {
                "$ref": "#/components/schemas/ExternalPaymentInstrument"
              }
            }
          },
          "indicative_exchange_rate": {
            "$ref": "#/components/schemas/DecimalString"
          },
          "current_day_hours_of_operation": {
            "type": "object",
            "required": [
              "open_utc",
              "close_utc"
            ],
            "properties": {
              "open_utc": {
                "$ref": "#/components/schemas/DateTime"
              },
              "close_utc": {
                "$ref": "#/components/schemas/DateTime"
              }
            }
          },
          "liquidity_provider": {
            "$ref": "#/components/schemas/LiquidityProvider"
          },
          "estimated_settlement_time": {
            "type": "string",
            "enum": [
              "T+0",
              "T+1",
              "T+2"
            ]
          },
          "created_at": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "Quote": {
        "type": "object",
        "required": [
          "id",
          "offering_id",
          "exchange_rate",
          "payin",
          "payout",
          "submission_expires_at",
          "funding_expires_at",
          "created_at"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "offering_id": {
            "type": "string"
          },
          "exchange_rate": {
            "$ref": "#/components/schemas/DecimalString"
          },
          "payin": {
            "type": "object",
            "required": [
              "total",
              "fee",
              "tax"
            ],
            "properties": {
              "total": {
                "$ref": "#/components/schemas/DecimalString"
              },
              "fee": {
                "$ref": "#/components/schemas/DecimalString"
              },
              "tax": {
                "$ref": "#/components/schemas/DecimalString"
              }
            }
          },
          "payout": {
            "type": "object",
            "required": [
              "total"
            ],
            "properties": {
              "total": {
                "$ref": "#/components/schemas/DecimalString"
              }
            }
          },
          "submission_expires_at": {
            "$ref": "#/components/schemas/DateTime"
          },
          "funding_expires_at": {
            "$ref": "#/components/schemas/DateTime"
          },
          "created_at": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "NewQuote": {
        "type": "object",
        "required": [
          "offering_id"
        ],
        "properties": {
          "offering_id": {
            "type": "string"
          }
        },
        "oneOf": [
          {
            "required": [
              "payin_amount"
            ],
            "properties": {
              "payin_amount": {
                "$ref": "#/components/schemas/DecimalString"
              }
            }
          },
          {
            "required": [
              "payout_amount"
            ],
            "properties": {
              "payout_amount": {
                "$ref": "#/components/schemas/DecimalString"
              }
            }
          }
        ]
      },
      "OrderStatus": {
        "type": "string",
        "enum": [
          "STEP_1_AWAITING_FUNDING",
          "STEP_2_FILLING_FX",
          "STEP_3_SETTLING_PAYOUT",
          "STEP_4_COMPLETED",
          "FAILED_FUNDING_EXPIRED",
          "FAILED_DECLINED_BY_LIQ_PROVIDER",
          "FAILED_REFUND_REQUESTED",
          "FAILED_REFUND_PROCESSED"
        ]
      },
      "FundingInstructions": {
        "type": "object",
        "required": [
          "currency",
          "method",
          "details"
        ],
        "properties": {
          "currency": {
            "$ref": "#/components/schemas/PayinCurrency"
          },
          "method": {
            "$ref": "#/components/schemas/PaymentMethod"
          },
          "details": {
            "oneOf": [
              {
                "$ref": "#/components/schemas/PaymentMethodSolanaAddress"
              },
              {
                "$ref": "#/components/schemas/PaymentMethodCopBankAccount"
              }
            ]
          }
        }
      },
      "Order": {
        "type": "object",
        "required": [
          "id",
          "quote_id",
          "offering_id",
          "reference_number",
          "exchange_rate",
          "effective_exchange_rate",
          "payin",
          "payout",
          "status",
          "funding_instructions",
          "created_at",
          "updated_at"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "quote_id": {
            "type": "string"
          },
          "offering_id": {
            "type": "string"
          },
          "reference_number": {
            "type": "string"
          },
          "external_reference_id": {
            "type": "string"
          },
          "exchange_rate": {
            "$ref": "#/components/schemas/DecimalString"
          },
          "effective_exchange_rate": {
            "$ref": "#/components/schemas/DecimalString"
          },
          "payin": {
            "type": "object",
            "required": [
              "external_payment_instrument",
              "total",
              "fee",
              "tax"
            ],
            "properties": {
              "external_payment_instrument": {
                "$ref": "#/components/schemas/ExternalPaymentInstrument"
              },
              "total": {
                "$ref": "#/components/schemas/DecimalString"
              },
              "fee": {
                "$ref": "#/components/schemas/DecimalString"
              },
              "tax": {
                "$ref": "#/components/schemas/DecimalString"
              }
            }
          },
          "payout": {
            "type": "object",
            "required": [
              "external_payment_instrument",
              "total"
            ],
            "properties": {
              "external_payment_instrument": {
                "$ref": "#/components/schemas/ExternalPaymentInstrument"
              },
              "total": {
                "$ref": "#/components/schemas/DecimalString"
              }
            }
          },
          "status": {
            "type": "object",
            "required": [
              "current_status",
              "status_history"
            ],
            "properties": {
              "current_status": {
                "$ref": "#/components/schemas/OrderStatus"
              },
              "status_history": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "$ref": "#/components/schemas/OrderStatus"
                    },
                    "created_at": {
                      "$ref": "#/components/schemas/DateTime"
                    }
                  }
                }
              }
            }
          },
          "funding_instructions": {
            "$ref": "#/components/schemas/FundingInstructions"
          },
          "retry_order_id": {
            "type": "string"
          },
          "created_at": {
            "$ref": "#/components/schemas/DateTime"
          },
          "updated_at": {
            "$ref": "#/components/schemas/DateTime"
          }
        }
      },
      "NewOrder": {
        "type": "object",
        "required": [
          "quote_id"
        ],
        "properties": {
          "quote_id": {
            "type": "string"
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "error",
          "message"
        ],
        "properties": {
          "error": {
            "type": "integer",
            "format": "int32",
            "description": "Error code",
            "example": 400
          },
          "message": {
            "type": "string",
            "description": "Error description",
            "example": "Invalid organization data provided"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Use your API key as the bearer token",
        "x-default": "DEFAULT-TOKEN-HERE"
      }
    }
  }
}